<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Favorite Abstracts]]></title>
  <link href="http://everpeace.github.io/atom.xml" rel="self"/>
  <link href="http://everpeace.github.io/"/>
  <updated>2014-08-11T00:09:13-07:00</updated>
  <id>http://everpeace.github.io/</id>
  <author>
    <name><![CDATA[Shingo Omura]]></name>
    <email><![CDATA[everpeace@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[plugin tests]]></title>
    <link href="http://everpeace.github.io/blog/2013/08/24/plugin-tests/"/>
    <updated>2013-08-24T15:35:00-07:00</updated>
    <id>http://everpeace.github.io/blog/2013/08/24/plugin-tests</id>
    <content type="html"><![CDATA[<p>This is a sample post for testing plugins.</p>

<!-- more -->


<h1>H1</h1>

<h2>H2</h2>

<h3>H3</h3>

<ul>
<li>list</li>
<li><p>list</p></li>
<li><p>nlist</p></li>
<li>nlist</li>
</ul>


<h3>backtick code block</h3>

<pre><code class="scala isBigGang.scala">def isBigGang(x: Int): (Boolean, String) =
         (x &gt; 9, "Compared gang size to 9.")
</code></pre>

<h3>code block</h3>

<figure class='code'><figcaption><span>isBigGang.scala </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">isBigGang</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="o">(</span><span class="kt">Boolean</span><span class="o">,</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>         <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">9</span><span class="o">,</span> <span class="s">&quot;Compared gang size to 9.&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>gist</h3>

<div><script src='https://gist.github.com/4964844.js'></script>
<noscript><pre><code>import scala.language.higherKinds

// 代数の型クラスの階層があって
trait Algebra[E]{ def op(e1:E,e2:E):E }
trait SubAlgebra[E] extends Algebra[E]

// ある代数の型クラスのオブジェクトがあって
object ConcreteAlgebra extends SubAlgebra[Int]{
  def op(e1:Int, e2:Int) = e1+e2
}

// メソッドぽくしたいからOpsトレイトを定義して
trait AlgebraOps[E]{def op(e:E):E }

// 要素と代数をpimpした値を作ってそこにOpsトレイトをくっつけて
case class Pimped[E,A[E]&lt;:Algebra[E]](e:E, alg:A[E]) extends AlgebraOps[Pimped[E,A]]{
  def op(p: Pimped[E, A]) = Pimped(alg.op(e,p.e),alg)
}

//PimpedとEの双方向の変換を用意して
//([E:Algebra]じゃないのはPimped[E,Algebra]じゃなくてPimped[E,A]になって欲しいから。)
implicit def pimp[E, A[E]&lt;:Algebra[E]](e:E)(implicit alg: A[E]):Pimped[E,A] = Pimped(e,alg)
implicit def unpimp[E, A[E]&lt;:Algebra[E]](p:Pimped[E,A]):E = p.e

// Intに対する代数を注入
implicit val alg = ConcreteAlgebra

// 3に対してpimpが適用されずエラーになってしまう。なぜ？？
// error: value op is not a member of Int
3 op 5

// マニュアルでpimpは適用出来る。5にはちゃんとpimpが適用される。
// 結果: Pimped(8,ConcreteAlgebra$@52f61f70)
pimp(3) op 5</code></pre></noscript></div>


<h3>code include</h3>

<figure class='code'><figcaption><span> (test.js)</span> <a href='http://everpeace.github.io/downloads/code/test.js'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">sample javascript from xui</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">xui</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">window</span>     <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">string</span>     <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">document</span>   <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">simpleExpr</span> <span class="o">=</span> <span class="sr">/^#?([\w-]+)$/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">idExpr</span>     <span class="o">=</span> <span class="sr">/^#/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">tagExpr</span>    <span class="o">=</span> <span class="sr">/&lt;([\w:]+)/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">slice</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">nodeType</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span> <span class="nx">slice</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">ret</span><span class="o">=</span><span class="p">[];</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">ret</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span> <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span> <span class="p">};</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">x$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">xui</span> <span class="o">=</span> <span class="nx">xui</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">xui</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>jsFiddle</h3>

<iframe style="width: 100%; height: 300px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/ccWP7/embedded/js,resources,html,css,result/light/"></iframe>


<h3>blockquote</h3>

<blockquote><p>Last night I lay in bed looking up at the stars in the sky and I thought to myself, where the heck is the ceiling.</p><footer><strong>@allanbranch</strong> <cite><a href='https://twitter.com/allanbranch/status/90766146063712256'>twitter.com/allanbranch/status/&hellip;</a></cite></footer></blockquote>


<h3>image</h3>

<p><img src="http://placekitten.com/890/280"></p>

<h3>pull quotes</h3>

<p><span class='pullquote-right' data-pullquote='surround it like this'>
Surround your paragraph with the pull quote tags. Then when you come to
the text you want to pull, surround it like this and that&rsquo;s all there is to it.
</span></p>

<h3>video</h3>

<p><video width='640' height='320' preload='none' controls poster='http://s3.imathis.com/video/zero-to-fancy-buttons.png'><source src='http://s3.imathis.com/video/zero-to-fancy-buttons.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>
]]></content>
  </entry>
  
</feed>
